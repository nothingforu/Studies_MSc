#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>
int main(int argc, char* argv[]) {
    int n = 100000000; // Rozmiar wektora
    float *A = NULL;
    float *B = NULL;
    float *C = NULL;

    int rank, size;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

if (n%size !=0)
 {
if (rank == 0)
 {
 printf("rozmiar wektora n musi byc podziielny");
}
 MPI_Abort(MPI_COMM_WORLD,1); }

    // Obliczenie lokalnego rozmiaru wektora
  int local_n = n/size;
 double start_time, end_time;
 //Alokacja pami~Yci dla lokalnych wektorów
 float *local_B = (float*) malloc(local_n * sizeof(float));
 float *local_C = (float*) malloc(local_n * sizeof(float));
 float *local_A = (float*) malloc(local_n * sizeof(float));
 if (local_B == NULL || local_C == NULL || local_A == NULL) {
  printf(" lokacji pami\n");
      MPI_Abort(MPI_COMM_WORLD, 1);
          }
 if (rank == 0) {
       B = (float*) malloc(n * sizeof(float));
       C = (float*) malloc(n * sizeof(float));
       A = (float*) malloc(n * sizeof(float));
   if (B == NULL || C == NULL || A == NULL) {
    MPI_Abort(MPI_COMM_WORLD, 1);
                        }
        // Inicjalizacja danych wej~[ciowych
start_time = MPI_Wtime();
srand(42);
 for (int i = 0; i < n; i++) {
      B[i] = (float) rand() / RAND_MAX;
      C[i] = (float) rand() / RAND_MAX;
       }

}

 MPI_Scatter(B, local_n, MPI_FLOAT, local_B, local_n, MPI_FLOAT, 0, MPI_COMM_WORLD);
 MPI_Scatter(C, local_n, MPI_FLOAT, local_C, local_n, MPI_FLOAT, 0, MPI_COMM_WORLD);
        // Obliczanie lokalnego wyniku
        for (int i = 0; i < local_n; i++) {
        local_A[i] = local_B[i] + local_C[i];
  }
       // Zbieranie lokalnych wyników do procesu 0
       MPI_Gather(local_A, local_n, MPI_FLOAT, A, local_n, MPI_FLOAT, 0, MPI_COMM_WORLD);
      // Proces 0 wypisuje wyniki
        if (rank == 0) {
       printf("A[0] = %f, B[0] = %f, C[0] = %f\n", A[0], B[0], C[0]);
      printf("A[%d] = %f, B[%d] = %f, C[%d] = %f\n", n-1, A[n-1], n-1, B[n-1], n-1, C[n-1]);
     end_time = MPI_Wtime();
        printf("Czas wykonania: %.5f sekund\n", end_time-start_time);                                                                                                                                              
        // Zwolnienie pami~Yci
   free(A);
   free(B);
   free(C);
        }

                  free(local_B);

                  free(local_C);

                  free(local_A);


               MPI_Finalize();
return 0; }